import asyncio
import aiohttp
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from config import bot, BOT_TOKEN
from middleware import AlbumMiddleware
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ContentType, InputFile
from utils import check_swap_status, detect_faces, start_swap, get_swap_status

photos_router = Router()

photos_router.message.middleware(AlbumMiddleware(latency=0.4))

class CreateStickerPack(StatesGroup):
    waiting_for_photo_A = State()
    waiting_for_memes = State()
    waiting_for_name_pack = State()


@photos_router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –æ—Ç –ö–æ—Ä–æ—á–µ –ú–µ–¥–∏–∞. \n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∏ —è —Å–¥–µ–ª–∞—é –µ–≥–æ –ª–∏—Ü–æ –≤ –º–µ–º–∞—Ö.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    )
    await message.reply(welcome_text)
    await state.set_state(CreateStickerPack.waiting_for_photo_A)

@photos_router.message(CreateStickerPack.waiting_for_photo_A, F.photo)
async def handle_photo_A(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    file = await bot.get_file(message.photo[-1].file_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    await state.update_data(new_face_url=file_url)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ–º–æ–≤ –ø–∞—á–∫–æ–π 10-12 —à—Ç—É–∫")
    await state.set_state(CreateStickerPack.waiting_for_memes)


@photos_router.message(CreateStickerPack.waiting_for_memes, F.photo)
async def handle_photo_meme(message: types.Message, state: FSMContext, album: list):
    data = await state.get_data()
    new_face_url = data.get("new_face_url")

    await message.reply(f"–ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ {len(album)} —Ñ–æ—Ç–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 30—Å–µ–∫.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    files = await asyncio.gather(*[bot.get_file(mess.photo[-1].file_id) for mess in album])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    files_url = [f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}" for file in files]

    # –í—ã–∑–æ–≤ detect_faces –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    detect_results = await asyncio.gather(*[detect_faces(url) for url in files_url])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ detect_faces –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏)
    faces = [result[-1] for result in detect_results if result]  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ result –Ω–µ None

    jobs = await asyncio.gather(*[start_swap(url, face, new_face_url) for url, face in zip(files_url, faces)])

    await asyncio.sleep(30)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    # jobs - —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    results = await check_swap_status(jobs)

    # results —Å–æ–¥–µ—Ä–∂–∏—Ç {job_id: result_url} –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    for job, result_url in results.items():
        print(f"–ó–∞–¥–∞—á–∞ {job} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_url}")

    await message.answer(f"{faces}\n"
                         f"{jobs}\n"
                         f"{results}")

    await state.update_data(urls=results)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: ")
    await state.set_state(CreateStickerPack.waiting_for_name_pack)

@photos_router.message(CreateStickerPack.waiting_for_name_pack, F.text)
async def create_sticker_pack(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    sticker_pack_name = f"custom_pack_by_{BOT_TOKEN[:8]}"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞
    sticker_pack_title = message.text
    emoji = "üòÄ"

    # –°–ø–∏—Å–æ–∫ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    data = await state.get_data()
    results = data.get("urls")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
        first_sticker_url = next(iter(results.values()))  # –ü–æ–ª—É—á–∞–µ–º URL –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
        async with aiohttp.ClientSession() as session:
            async with session.get(first_sticker_url) as resp:
                if resp.status == 200:
                    with open("sticker_image_0.png", "wb") as f:
                        f.write(await resp.read())

        await bot.create_new_sticker_set(
            user_id=user_id,
            name=sticker_pack_name,
            title=sticker_pack_title,
            png_sticker=InputFile("sticker_image_0.png"),
            emojis=emoji
        )
        await message.reply(f"–°—Ç–∏–∫–µ—Ä–ø–∞–∫ '{sticker_pack_title}' —Å–æ–∑–¥–∞–Ω! –î–æ–±–∞–≤–ª—è—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã...")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
        for i, (job_id, url) in enumerate(results.items()):
            if i == 0:
                continue  # –ü–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω

            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status == 200:
                        with open(f"sticker_image_{i}.png", "wb") as f:
                            f.write(await resp.read())

            await bot.add_sticker_to_set(
                user_id=user_id,
                name=sticker_pack_name,
                png_sticker=InputFile(f"sticker_image_{i}.png"),
                emojis=emoji
            )

        await message.reply(f"–í—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ '{sticker_pack_title}'!")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: {e}")
