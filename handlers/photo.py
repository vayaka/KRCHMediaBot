import random
import os
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from PIL import Image
from config import bot, BOT_TOKEN
from middleware import AlbumMiddleware
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, InputSticker
from aiogram.fsm.state import StatesGroup, State
from database import get_all_groups_from_db
from utils import generate_model

photos_router = Router()

photos_router.message.middleware(AlbumMiddleware(latency=0.4))

class CreateStickerPack(StatesGroup):
    waiting_for_photo_A = State()
    waiting_for_memes = State()
    waiting_for_name_pack = State()

class CreateMemeGroup(StatesGroup):
    waiting_for_group_name = State()
    waiting_for_group_photos = State()


@photos_router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –æ—Ç –ö–æ—Ä–æ—á–µ –ú–µ–¥–∏–∞. \n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∏ —è —Å–¥–µ–ª–∞—é –µ–≥–æ –ª–∏—Ü–æ –≤ –º–µ–º–∞—Ö.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    )
    await message.reply(welcome_text)
    await state.set_state(CreateStickerPack.waiting_for_photo_A)

@photos_router.message(CreateStickerPack.waiting_for_photo_A, F.photo)
async def handle_photo_A(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    file = await bot.get_file(message.photo[-1].file_id)

    user_id = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
    local_dir = f"images/users/{user_id}/"
    local_file_path = f"{local_dir}{user_id}_photo_A.jpg"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏ —Å–æ–∑–¥–∞–µ–º –µ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not os.path.exists(local_dir):
        os.makedirs(local_dir, exist_ok=True)

    await bot.download_file(file.file_path, local_file_path)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    groups = await get_all_groups_from_db()
    print(groups)
    # –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    keyboard_buttons = [[]]
    for group_id, group_name in groups:
        button = InlineKeyboardButton(text=group_name, callback_data=f"select_group:{group_id}:{group_name}")
        keyboard_buttons[0].append(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard_buttons[0].append(InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data="create_new_group"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons, row_width=2)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –º–µ–º–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:", reply_markup=keyboard)
    await state.update_data(local_file_path=local_file_path)
    await state.set_state(CreateStickerPack.waiting_for_memes)

@photos_router.callback_query(F.data.startswith("select_group:"))
async def select_group(callback_query: types.CallbackQuery, state: FSMContext):

    keyboard_buttons = [[]]
    keyboard_buttons[0].append(InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="start_gen"))
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons, row_width=2)

    # group_id = callback_query.data.split(":")[1]
    group_name = callback_query.data.split(":")[2]
    await state.update_data(selected_group=group_name)
    await callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É '{group_name}'. –ù–∞–∂–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ç–æ–≤–æ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", reply_markup=keyboard)


@photos_router.callback_query(F.data.startswith("start_gen"))
async def generation(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ.")
    data = await state.get_data()
    swap_image = data.get("local_file_path")
    group_name = data.get("selected_group")

    target_images_folder = f"images/meme_groups/{group_name}"

    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        results = await generate_model(target_images_folder, swap_image)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if "error" in result:
                print(f"–û—à–∏–±–∫–∞: {result['input']} - {result['error']}")
            else:
                print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['input']} -> {result['output']}")
        await state.update_data(paths=results)
    except Exception as e:
        print(e)
        await callback_query.message.answer("–ß—Ç–æ-–ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
    finally:
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: ")
        await state.set_state(CreateStickerPack.waiting_for_name_pack)


@photos_router.callback_query(F.data == "create_new_group")
async def create_new_group(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –º–µ–º–æ–≤:")
    await state.set_state(CreateMemeGroup.waiting_for_group_name)

@photos_router.message(CreateStickerPack.waiting_for_memes, F.photo | F.text == "–≥–æ—Ç–æ–≤–æ")
async def handle_photo_meme(message: types.Message, state: FSMContext, album: list = None):
    data = await state.get_data()
    swap_image = data.get("local_file_path")
    group_name = data.get("selected_group")

    target_images_folder = f"images/meme_groups/{group_name}"

    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        results = await generate_model(target_images_folder, swap_image)

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if "error" in result:
                print(f"–û—à–∏–±–∫–∞: {result['input']} - {result['error']}")
            else:
                print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['input']} -> {result['output']}")
        await state.update_data(paths=results)
    except Exception as e:
        print(e)
        await message.answer("–ß—Ç–æ-–ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(CreateStickerPack.waiting_for_name_pack)
    finally:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: ")
        await state.set_state(CreateStickerPack.waiting_for_name_pack)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

def resize_image_to_telegram_requirements(input_path, output_path):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è Telegram –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤.
    """
    with Image.open(input_path) as img:
        max_size = 512  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
        img.thumbnail((max_size, max_size))  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
        img = img.convert("RGBA")  # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA
        img.save(output_path, format="PNG")

@photos_router.message(CreateStickerPack.waiting_for_name_pack, F.text)
async def create_sticker_pack(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    bot_username = (await bot.get_me()).username
    if not bot_username.lower().endswith("bot"):
        await message.reply("–û—à–∏–±–∫–∞: –∏–º—è –±–æ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    user_id = message.from_user.id
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞
    sticker_pack_name = f"sticker_pack_{random.randint(1000, 9999)}_by_{bot_username}"
    sticker_pack_title = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞
    emoji_list = ["üòÄ", "üòÇ", "ü§£", "üòç", "üòé", "üëç", "üí™", "üî•", "üòä", "ü§Æ", "üòâ", "ü•∞"]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    paths = data.get("paths", [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—É—Ç–µ–π
    if not paths:
        await message.reply("–û—à–∏–±–∫–∞: –ø—É—Ç–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤
    stickers = []
    for i, path_data in enumerate(paths):
        sticker_path = path_data.get('output')
        if not sticker_path:
            continue

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        resized_path = f"./images/temp/resized_sticker_{i}.png"
        resize_image_to_telegram_requirements(sticker_path, resized_path)

        input_sticker = InputSticker(
            sticker=FSInputFile(resized_path),
            format="static",
            emoji_list=[emoji_list[i % len(emoji_list)]]
        )
        stickers.append(input_sticker)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–∏–∫–µ—Ä
    if not stickers:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
    try:
        await message.reply("–°–æ–∑–¥–∞—é —Å—Ç–∏–∫–µ—Ä–ø–∞–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        await bot.create_new_sticker_set(
            user_id=user_id,
            name=sticker_pack_name,
            title=sticker_pack_title,
            stickers=stickers,
            sticker_format="static"
        )

        await message.reply(f"–°—Ç–∏–∫–µ—Ä–ø–∞–∫ '{sticker_pack_title}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫: https://t.me/addstickers/{sticker_pack_name}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–æ–º
        media_group = MediaGroup()
        for i, path_data in enumerate(paths):
            resized_path = f"./images/temp/resized_sticker_{i}.png"
            if os.path.exists(resized_path):
                media_group.attach_photo(FSInputFile(resized_path))

        if media_group:
            await message.answer_media_group(media_group)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞: {e}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for i, path_data in enumerate(paths):
        resized_path = f"./images/temp/resized_sticker_{i}.png"
        orig_path = path_data.get('output')
        if os.path.exists(resized_path):
            os.remove(resized_path)
        if os.path.exists(orig_path):
            os.remove(orig_path)
